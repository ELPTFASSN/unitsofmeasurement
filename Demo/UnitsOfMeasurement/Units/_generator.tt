<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.OLE.Interop" #>
<#@ assembly name="Microsoft.VisualStudio.Shell" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ assembly name="C:\Users\Marek\Documents\_git\MAN\UnitsOfMeasurement\VisualStudioExtension\Parser\bin\Debug\Man.UnitsOfMeasurement.Parser.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.CodeDom.Compiler" #>
<#@ import namespace="Man.UnitsOfMeasurement" #>
<#
    Initialize("_definitions.txt");

    List<UnitType> units = new List<UnitType>();
    List<ScaleType> scales = new List<ScaleType>();

    using (StreamReader input = File.OpenText(__inputFilePath))
    {
        Lexer lexer = new Lexer(input, LogParserError);
        Parser parser = new Parser(lexer, units, scales);
        parser.Parse();
    }

    foreach (UnitType u in units)
    {
        ProcessUnit(u);
    }
    foreach (ScaleType s in scales)
    {
        ProcessScale(s);
    }

    Summarize(units, scales);

    DeleteOldOutputs();
    Host.LogErrors(__errorCollection);
#>

<#+
    int __family = 0;
    string __inputFilePath;
    string __defaultNamespace;
    string __projectNamespace;
    string __toolNamespace;
    CompilerErrorCollection __errorCollection;

    void Initialize(string inputFileName)
    {
        __inputFilePath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), inputFileName);

        EnvDTE.Project dteProject = __getTemplateProject();
        __defaultNamespace = (string)dteProject.Properties.Item("DefaultNamespace").Value;

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        __toolNamespace = (string)templateProjectItem.Properties.Item("CustomToolNamespace").Value;

        __projectNamespace = String.IsNullOrWhiteSpace(__toolNamespace) ? __defaultNamespace : __toolNamespace;

        __errorCollection = new CompilerErrorCollection();
    }

    void LogParserError(bool isError, int line, int column, string token, string message)
    {
        __errorCollection.Add( new CompilerError(__inputFilePath, line, column, token, message));
    }
#>
<#+
    // This code block has been copied from Oleg Sych article "How to
    // generate multiple outputs from single T4 template", published at:
    // http://www.olegsych.com/2008/03/how-to-generate-multiple-outputs-from-single-t4-template/
    // under the terms of Creative Commons License, published at:
    // http://creativecommons.org/licenses/by/2.5/

    List<string> __savedOutputs = new List<string>();
    Engine __engine = new Engine();

    void DeleteOldOutputs()
    {
        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        foreach (EnvDTE.ProjectItem childProjectItem in templateProjectItem.ProjectItems)
        {
            if (!__savedOutputs.Contains(childProjectItem.Name))
                childProjectItem.Delete();
        }
    }

    void ProcessTemplate(string templateFileName, string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        string template = File.ReadAllText(Host.ResolvePath(templateFileName));
        string output = __engine.ProcessTemplate(template, Host);
        File.WriteAllText(outputFilePath, output);

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);

        __savedOutputs.Add(outputFileName);
    }

    void SaveOutput(string outputFileName)
    {
        string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
        string outputFilePath = Path.Combine(templateDirectory, outputFileName);

        File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString());
        this.GenerationEnvironment = new StringBuilder();

        EnvDTE.ProjectItem templateProjectItem = __getTemplateProjectItem();
        templateProjectItem.ProjectItems.AddFromFile(outputFilePath);

        __savedOutputs.Add(outputFileName);
    }

    EnvDTE.ProjectItem __getTemplateProjectItem()
    {
        EnvDTE.Project dteProject = __getTemplateProject();

        IVsProject vsProject = __dteProjectToVsProject(dteProject);

        int iFound = 0;
        uint itemId = 0;
        VSDOCUMENTPRIORITY[] pdwPriority = new VSDOCUMENTPRIORITY[1];
        int result = vsProject.IsDocumentInProject(Host.TemplateFile, out iFound, pdwPriority, out itemId);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.IsDocumentInProject");
        if (iFound == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");
        if (itemId == 0)
            throw new Exception("Cannot retrieve ProjectItem for template file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider itemContext = null;
        result = vsProject.GetItemContext(itemId, out itemContext);
        if (result != VSConstants.S_OK)
            throw new Exception("Unexpected error calling IVsProject.GetItemContext");
        if (itemContext == null)
            throw new Exception("IVsProject.GetItemContext returned null");
    
        ServiceProvider itemContextService = new ServiceProvider(itemContext);
        EnvDTE.ProjectItem templateItem = (EnvDTE.ProjectItem)itemContextService.GetService(typeof(EnvDTE.ProjectItem));
        Debug.Assert(templateItem != null, "itemContextService.GetService returned null");

        return templateItem;
    }

    EnvDTE.Project __getTemplateProject()
    {
        IServiceProvider hostServiceProvider = (IServiceProvider)Host;
        if (hostServiceProvider == null)
            throw new Exception("Host property returned unexpected value (null)");

        EnvDTE.DTE dte = (EnvDTE.DTE)hostServiceProvider.GetService(typeof(EnvDTE.DTE));
        if (dte == null)
            throw new Exception("Unable to retrieve EnvDTE.DTE");

        Array activeSolutionProjects = (Array)dte.ActiveSolutionProjects;
        if (activeSolutionProjects == null)
            throw new Exception("DTE.ActiveSolutionProjects returned null");

        EnvDTE.Project dteProject = (EnvDTE.Project)activeSolutionProjects.GetValue(0);
        if (dteProject == null)
            throw new Exception("DTE.ActiveSolutionProjects[0] returned null");

        return dteProject;
    }

    static IVsProject __dteProjectToVsProject(EnvDTE.Project project)
    {
        if (project == null) 
            throw new ArgumentNullException("project");
            
        string projectGuid = null;        

        // DTE does not expose the project GUID that exists at in the msbuild project file.        
        // Cannot use MSBuild object model because it uses a static instance of the Engine,         
        // and using the Project will cause it to be unloaded from the engine when the         
        // GC collects the variable that we declare.       
        using (XmlReader projectReader = XmlReader.Create(project.FileName))
        {
            projectReader.MoveToContent();
            object nodeName = projectReader.NameTable.Add("ProjectGuid");
            while (projectReader.Read())
            {
                if (Object.Equals(projectReader.LocalName, nodeName))
                {
                    projectGuid = (string)projectReader.ReadElementContentAsString(); 
                    break;
                }
            }
        }
        if (string.IsNullOrEmpty(projectGuid))
            throw new Exception("Unable to find ProjectGuid element in the project file");

        Microsoft.VisualStudio.OLE.Interop.IServiceProvider dteServiceProvider = 
            (Microsoft.VisualStudio.OLE.Interop.IServiceProvider)project.DTE;
        IServiceProvider serviceProvider = new ServiceProvider(dteServiceProvider); 
        IVsHierarchy vsHierarchy = VsShellUtilities.GetHierarchy(serviceProvider, new Guid(projectGuid));
            
        IVsProject vsProject = (IVsProject)vsHierarchy;
        if (vsProject == null)
            throw new ArgumentException("Project is not a VS project.");
        return vsProject;
    }
#>

<#+
    void ProcessUnit(UnitType u)
    {
        string Namespace = __projectNamespace;
        
        string Unit = u.Name;
        string Sense = u.Sense.Code;
        string Family = (u.Prime == null) ? (__family++).ToString() : String.Format("{0}.Family", u.FamilyPrime().Name);
        string Format = u.Format;
        string Tags = String.Format("\"{0}\"", String.Join("\", \"", u.Tags));
        
        string Factor = u.Factor.Code;
        string Value = u.Factor.Value.Type.Name;
        string One = u.Factor.Value.Type.One.CSString();
        string Zero = u.Factor.Value.Type.Zero.CSString();
#>
/*******************************************************************************

    Units of Measurement for C# applications

    Copyright (C) Marek Aniola

    This program is provided to you under the terms of the license
    as published at http://unitsofmeasurement.codeplex.com/license


********************************************************************************/
using System;

namespace <#= Namespace #>
{
    public partial struct <#= Unit #> : IQuantity<<#= Value #>>, IEquatable<<#= Unit #>>, IComparable<<#= Unit #>>, IFormattable
    {
        #region Fields
        private readonly <#= Value #> m_value;
        #endregion

        #region Properties

        // instance properties
        public <#= Value #> Value { get { return m_value; } }

        // unit properties
        public Dimension UnitSense { get { return <#= Unit #>.Sense; } }
        public int UnitFamily { get { return <#= Unit #>.Family; } }
        public <#= Value #> UnitFactor { get { return <#= Unit #>.Factor; } }
        public string UnitFormat { get { return <#= Unit #>.Format; } }
        public SymbolCollection UnitSymbol { get { return <#= Unit #>.Symbol; } }

        #endregion

        #region Constructor(s)
        public <#= Unit #>(<#= Value #> value)
        {
            m_value = value;
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Unit #>(<#= Value #> q) { return new <#= Unit #>(q); }
<#+
        foreach (MeasureType s in u.Relatives())
        {
            string Relative = ((UnitType)s).Name;
#>
        public static explicit operator <#= Unit #>(<#= Relative #> q) { return new <#= Unit #>((<#= Unit #>.Factor / <#= Relative #>.Factor) * q.Value); }
<#+
        }
#>
        public static <#= Unit #> From(IQuantity<<#= Value #>> q)
        {
            if (q.UnitSense != <#= Unit #>.Sense) throw new InvalidOperationException(String.Format("Cannot convert type \"{0}\" to \"<#= Unit #>\"", q.GetType().Name));
            return new <#= Unit #>((<#= Unit #>.Factor / q.UnitFactor) * q.Value);
        }
        #endregion

        #region IObject / IEquatable<<#= Unit #>>
        public override int GetHashCode() { return m_value.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj != null) && (obj is <#= Unit #>) && Equals((<#= Unit #>)obj); }
        public bool /* IEquatable<<#= Unit #>> */ Equals(<#= Unit #> other) { return this.Value == other.Value; }
        #endregion

        #region Comparison / IComparable<<#= Unit #>>
        public static bool operator ==(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value == rhs.Value; }
        public static bool operator !=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value != rhs.Value; }
        public static bool operator <(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value < rhs.Value; }
        public static bool operator >(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value > rhs.Value; }
        public static bool operator <=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value <= rhs.Value; }
        public static bool operator >=(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value >= rhs.Value; }
        public int /* IComparable<<#= Unit #>> */ CompareTo(<#= Unit #> other) { return this.Value.CompareTo(other.Value); }
        #endregion

        #region Arithmetic
        // Inner:
        public static <#= Unit #> operator +(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.Value + rhs.Value); }
        public static <#= Unit #> operator -(<#= Unit #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs.Value - rhs.Value); }
        public static <#= Unit #> operator ++(<#= Unit #> q) { return new <#= Unit #>(q.Value + <#= One #>); }
        public static <#= Unit #> operator --(<#= Unit #> q) { return new <#= Unit #>(q.Value - <#= One #>); }
        public static <#= Unit #> operator -(<#= Unit #> q) { return new <#= Unit #>(-q.Value); }
        public static <#= Unit #> operator *(<#= Value #> lhs, <#= Unit #> rhs) { return new <#= Unit #>(lhs * rhs.Value); }
        public static <#= Unit #> operator *(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.Value * rhs); }
        public static <#= Unit #> operator /(<#= Unit #> lhs, <#= Value #> rhs) { return new <#= Unit #>(lhs.Value / rhs); }
        public static <#= Value #> operator /(<#= Unit #> lhs, <#= Unit #> rhs) { return lhs.Value / rhs.Value; }
        // Outer:
<#+
        foreach (BinaryOperation o in u.OuterOperations)
        {
            string lhsValue = (o.Lhs.IsPredefined) ? "lhs" : "lhs.Value";
            string rhsValue = (o.Rhs.IsPredefined) ? "rhs" : "rhs.Value";
            string retValue = (o.Result.IsPredefined) ? 
                String.Format("{0} {1} {2}", lhsValue, o.Operation, rhsValue) :
                String.Format("new {0}({1} {2} {3})", o.Result.Name, lhsValue, o.Operation, rhsValue);
#>
        public static <#= o.Result.Name #> operator <#= o.Operation #>(<#= o.Lhs.Name #> lhs, <#= o.Rhs.Name #> rhs) { return <#= retValue #>; }
<#+
        }
#>
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Unit #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Unit #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return String.Format(fp, format ?? <#= Unit #>.Format, Value, <#= Unit #>.Symbol[0]);
        }
        #endregion

        #region Statics
        private static readonly Dimension s_sense = <#= Sense #>;
        private static readonly int s_family = <#= Family #>;
        private static <#= Value #> s_factor = <#= Factor #>;
        private static string s_format = "<#= Format #>";
        private static readonly SymbolCollection s_symbol = new SymbolCollection(<#= Tags #>);

        private static readonly <#= Unit #> s_one = new <#= Unit #>(<#= One #>);
        private static readonly <#= Unit #> s_zero = new <#= Unit #>(<#= Zero #>);
        
        public static Dimension Sense { get { return s_sense; } }
        public static int Family { get { return s_family; } }
        public static <#= Value #> Factor { get { return s_factor; } set { s_factor = value; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static SymbolCollection Symbol { get { return s_symbol; } }

        public static <#= Unit #> One { get { return s_one; } }
        public static <#= Unit #> Zero { get { return s_zero; } }
        #endregion
    }
}
<#+
        SaveOutput(Unit + ".cs");
    }
#>

<#+
    void ProcessScale(ScaleType s)
    {
        string Namespace = __projectNamespace;

        string Scale = s.Name;
        string Unit = s.Unit.Name;
        string Offset = s.Offset.Code;
        string Family = (s.Prime == null) ? (__family++).ToString() : String.Format("{0}.Family", s.FamilyPrime().Name);
        string Format = s.Format;

        string Value = s.Unit.Factor.Value.Type.Name;
        string One = s.Unit.Factor.Value.Type.One.CSString();
        string Zero = s.Unit.Factor.Value.Type.Zero.CSString();
#>
/*******************************************************************************

    Units of Measurement for C# applications

    Copyright (C) Marek Aniola

    This program is provided to you under the terms of the license
    as published at http://unitsofmeasurement.codeplex.com/license


********************************************************************************/
using System;

namespace <#= Namespace #>
{
    public partial struct <#= Scale #> : ILevel<<#= Value #>>, IEquatable<<#= Scale #>>, IComparable<<#= Scale #>>, IFormattable
    {
        #region Fields
        private readonly <#= Unit #> m_level;
        #endregion

        #region Properties

        // instance properties
        public <#= Unit #> Level { get { return m_level; } }
        public <#= Unit #> Extent { get { return (m_level - <#= Scale #>.Offset); } }

        // scale properties
        public <#= Unit #> ScaleOffset { get { return <#= Scale #>.Offset; } }
        public string ScaleFormat { get { return <#= Scale #>.Format; } }

        // ILevel<<#= Value #>> properties
        IQuantity<<#= Value #>> ILevel<<#= Value #>>.Level { get { return Level; } }
        IQuantity<<#= Value #>> ILevel<<#= Value #>>.Extent { get { return Extent; } }
        IQuantity<<#= Value #>> ILevel<<#= Value #>>.ScaleOffset { get { return ScaleOffset; } }

        #endregion

        #region Constructor(s)
        public <#= Scale #>(<#= Unit #> level)
        {
            m_level = level;
        }
        public <#= Scale #>(<#= Value #> level) :
            this(new <#= Unit #>(level))
        {
        }
        #endregion

        #region Conversions
        public static explicit operator <#= Scale #>(<#= Value #> q) { return new <#= Scale #>(q); }
        public static explicit operator <#= Scale #>(<#= Unit #> q) { return new <#= Scale #>(q); }

<#+
        foreach (MeasureType x in s.Relatives())
        {
            string Relative = ((ScaleType)x).Name;
#>
        public static explicit operator <#= Scale #>(<#= Relative #> q) { return new <#= Scale #>((<#= Unit #>)(q.Extent) + <#= Scale #>.Offset); }
<#+
        }
#>

        public static <#= Scale #> From(ILevel<<#= Value #>> q)
        {
            return new <#= Scale #>(<#= Unit #>.From(q.Extent) + <#= Scale #>.Offset);
        }
        #endregion

        #region IObject / IEquatable<<#= Scale #>>
        public override int GetHashCode() { return m_level.GetHashCode(); }
        public override bool /* IObject */ Equals(object obj) { return (obj != null) && (obj is <#= Scale #>) && Equals((<#= Scale #>)obj); }
        public bool /* IEquatable<<#= Scale #>> */ Equals(<#= Scale #> other) { return this.Level == other.Level; }
        #endregion

        #region Comparison / IComparable<<#= Scale #>>
        public static bool operator ==(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level == rhs.Level; }
        public static bool operator !=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level != rhs.Level; }
        public static bool operator <(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level < rhs.Level; }
        public static bool operator >(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level > rhs.Level; }
        public static bool operator <=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level <= rhs.Level; }
        public static bool operator >=(<#= Scale #> lhs, <#= Scale #> rhs) { return lhs.Level >= rhs.Level; }
        public int /* IComparable<<#= Scale #>> */ CompareTo(<#= Scale #> other) { return this.Level.CompareTo(other.Level); }
        #endregion

        #region Arithmetic
        public static <#= Scale #> operator +(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.Level + rhs); }
        public static <#= Scale #> operator +(<#= Unit #> lhs, <#= Scale #> rhs) { return new <#= Scale #>(lhs + rhs.Level); }
        public static <#= Scale #> operator -(<#= Scale #> lhs, <#= Unit #> rhs) { return new <#= Scale #>(lhs.Level - rhs); }
        public static <#= Unit #> operator -(<#= Scale #> lhs, <#= Scale #> rhs) { return (lhs.Level - rhs.Level); }
        public static <#= Scale #> operator -(<#= Scale #> q) { return new <#= Scale #>(-q.Level); }
        public static <#= Scale #> operator ++(<#= Scale #> q) { return q + <#= Unit #>.One; }
        public static <#= Scale #> operator --(<#= Scale #> q) { return q - <#= Unit #>.One; }
        #endregion

        #region Formatting
        public override string ToString() { return ToString(<#= Scale #>.Format, null); }
        public string ToString(string format) { return ToString(format, null); }
        public string ToString(IFormatProvider fp) { return ToString(<#= Scale #>.Format, fp); }
        public string /* IFormattable */ ToString(string format, IFormatProvider fp)
        {
            return m_level.ToString(format ?? <#= Scale #>.Format, fp);
        }
        #endregion

        #region Statics
        private static readonly <#= Unit #> s_offset = new <#= Unit #>(<#= Offset #>);
        private static readonly int s_family = <#= Family #>;
        private static string s_format = "<#= Format #>";
        private static readonly <#= Scale #> s_zero = new <#= Scale #>(<#= Zero #>);
        
        public static <#= Unit #> Offset { get { return s_offset; } }
        public static int Family { get { return s_family; } }
        public static string Format { get { return s_format; } set { s_format = value; } }
        public static <#= Scale #> Zero { get { return s_zero; } }
        #endregion
    }
}
<#+
        SaveOutput(Scale + ".cs");
    }
#>

<#+
    void Summarize(List<UnitType> units, List<ScaleType> scales)
    {
#>
//////////////////////////////////////////////////////////
//
//  U N I T S
//
//  (family) [dim] name : factor {tags}
<#+
        foreach (UnitType u in units)
        {
#>

    (<#= u.FamilyPrime().Name #>) <#= u.ToString() #>

<#+
            foreach (MeasureType s in u.Relatives())
            {
                string Relative = ((UnitType)s).Name;
#>
        (<#= u.Name #>)<#= Relative #>
<#+
            }
            foreach (BinaryOperation o in u.OuterOperations)
            {
#>
        <#= o.Result.Name #> = <#= o.Lhs.Name #> <#= o.Operation #> <#= o.Rhs.Name #>
<#+
            }
        }
#>

//////////////////////////////////////////////////////////
//
//  S C A L E S
//
//  (family) [dim] name : refpoint = unit offset
<#+
        foreach (ScaleType s in scales)
        {
            UnitType u = s.Unit;
#>

    (<#= s.FamilyPrime().Name #>) <#= s.ToString() #>

<#+
            foreach (MeasureType x in s.Relatives())
            {
                string Relative = ((ScaleType)x).Name;
#>
        (<#= s.Name #>)<#= Relative #>
<#+
            }
        }
    }
#>
